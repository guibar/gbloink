// Generated by CoffeeScript 1.4.0
(function() {
  var COUNTER, Scale, dist, randomColour;

  randomColour = function() {
    var color, i, letters, _i, _len, _ref;
    letters = '0123456789ABCDEF'.split('');
    color = '#';
    _ref = [0, 1, 2, 3, 4, 5];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      color += letters[Math.round(Math.random() * 15)];
    }
    return color;
  };

  dist = function(x1, y1, x2, y2) {
    var dx2, dy2;
    dx2 = (x1 - x2) * (x1 - x2);
    dy2 = (y1 - y2) * (y1 - y2);
    return Math.sqrt(dx2 + dy2);
  };

  Scale = (function() {

    function Scale(scale) {
      this.scale = scale;
    }

    Scale.prototype.transform = function(note) {
      var c, n;
      n = note % 12;
      c = 0;
      while (this.scale[n + c] === 0) {
        c = c + 1;
      }
      return note + c;
    };

    return Scale;

  })();

  this.NoteCalculator = (function() {

    function NoteCalculator() {
      this.scales = {};
      this.scales["chromatic"] = new Scale([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);
      this.scales["major"] = new Scale([1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1]);
      this.scales["minor"] = new Scale([1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1]);
      this.scales["diminished"] = new Scale([1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1]);
      this.scales["arab"] = new Scale([1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1]);
      this.scales["debussy"] = new Scale([1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]);
      this.scales["gypsy"] = new Scale([1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1]);
      this.scales["pent1"] = new Scale([1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0]);
      this.scales["pent2"] = new Scale([1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1]);
    }

    NoteCalculator.prototype.setCurrent = function(current) {
      this.current = current;
    };

    NoteCalculator.prototype.transform = function(y) {
      var note;
      note = Math.floor(((400 - y) / 6) + 30);
      return this.scales[this.current].transform(note);
    };

    return NoteCalculator;

  })();

  this.noteCalculator = new NoteCalculator();

  this.Html5Canvas = (function() {

    function Html5Canvas(canvasId, width, height, mouseDownListener) {
      this.canvasId = canvasId;
      this.width = width;
      this.height = height;
      this.mouseDownListener = mouseDownListener;
      this.canvas = document.getElementById(this.canvasId);
      this.ctx = this.canvas.getContext("2d");
      this.canvasTag = this.canvasId;
    }

    Html5Canvas.prototype.background = function(col) {
      this.ctx.fillStyle = col;
      return this.ctx.fillRect(0, 0, this.width, this.height);
    };

    Html5Canvas.prototype.fillStyle = function(col) {
      return this.ctx.fillStyle = col;
    };

    Html5Canvas.prototype.line = function(x1, y1, x2, y2) {
      this.ctx.beginPath();
      this.ctx.moveTo(x1, y1);
      this.ctx.lineTo(x2, y2);
      return this.ctx.stroke();
    };

    Html5Canvas.prototype.circle = function(cx, cy, r) {
      var x;
      this.ctx.beginPath();
      x = this.ctx.lineWidth;
      this.ctx.lineWidth = 5;
      this.ctx.arc(cx, cy, r, 0, 2 * Math.PI, false);
      this.ctx.stroke();
      return this.ctx.lineWidth = x;
    };

    Html5Canvas.prototype.rect = function(x, y, w, h) {
      var tmp;
      this.ctx.beginPath();
      tmp = this.ctx.lineWidth;
      this.ctx.lineWidth = 3;
      this.ctx.rect(x, y, w, h);
      this.ctx.stroke();
      return this.ctx.lineWidth = tmp;
    };

    return Html5Canvas;

  })();

  COUNTER = 0;

  this.Ball = (function() {

    function Ball(x, y, colour, MIDI) {
      this.x = x;
      this.y = y;
      this.colour = colour;
      this.MIDI = MIDI;
      this.id = COUNTER;
      this.dx = 3;
      this.dy = 3;
      this.rad = 5;
      this.volume = 50;
      COUNTER = COUNTER + 1;
    }

    Ball.prototype.move = function(otherBalls, blocks) {
      var another, b, flag, tx, ty, _i, _j, _len, _len1;
      tx = this.x + this.dx;
      ty = this.y + this.dy;
      flag = false;
      if ((tx < 3) || (tx > 597)) {
        this.dx = -this.dx;
        this.note();
        flag = true;
      }
      if ((ty < 3) || (ty > 397)) {
        this.dy = -this.dy;
        this.note();
        flag = true;
      }
      if (flag) {
        return;
      }
      for (_i = 0, _len = otherBalls.length; _i < _len; _i++) {
        another = otherBalls[_i];
        if (another.id === this.id) {
          continue;
        }
        if (another.hit(tx, this.y, this.rad)) {
          if (another.x < this.x) {
            this.dx = Math.abs(this.dx);
          } else {
            this.dx = -Math.abs(this.dx);
          }
          this.note();
          flag = true;
          continue;
        }
        if (another.hit(this.x, ty, this.rad)) {
          if (another.y < this.y) {
            this.dy = Math.abs(this.dy);
          } else {
            this.dy = -Math.abs(this.dy);
          }
          this.note();
          flag = true;
        }
      }
      for (_j = 0, _len1 = blocks.length; _j < _len1; _j++) {
        b = blocks[_j];
        if (b.hit(tx + this.dx, ty)) {
          this.dx = -this.dx;
          this.note();
        }
        if (b.hit(tx, ty + this.dy)) {
          this.dy = -this.dy;
          this.note();
        }
      }
      this.x = tx;
      return this.y = ty;
    };

    Ball.prototype.note = function() {
      var pitch;
      pitch = noteCalculator.transform(this.y);
      return this.play(this.id, pitch, this.volume, 0);
    };

    Ball.prototype.play = function(channel, note, velocity, delay) {
      this.MIDI.setVolume(0, 127);
      this.MIDI.noteOn(channel, note, velocity, delay);
      return this.MIDI.noteOff(channel, note, delay + 0.75);
    };

    Ball.prototype.draw = function(canvas) {
      canvas.ctx.beginPath();
      canvas.ctx.arc(this.x, this.y, this.rad, 0, 2 * Math.PI);
      canvas.ctx.fillStyle = this.colour;
      canvas.ctx.fill();
      return canvas.ctx.stroke();
    };

    Ball.prototype.hit = function(x, y, rad) {
      return dist(x, y, this.x, this.y) < this.rad + rad;
    };

    return Ball;

  })();

  this.Block = (function() {

    function Block(x, y) {
      this.x = x;
      this.y = y;
      this.w = 5 + Math.random() * 50;
      this.h = 5 + Math.random() * 50;
      this.left = this.x - this.w / 2;
      this.top = this.y - this.h / 2;
      this.right = this.x + this.w / 2;
      this.bottom = this.y + this.h / 2;
      this.colour = randomColour();
    }

    Block.prototype.hit = function(x, y) {
      if ((x < this.left) || (x > this.right)) {
        return false;
      }
      if ((y < this.top) || (y > this.bottom)) {
        return false;
      }
      return true;
    };

    Block.prototype.draw = function(canvas) {
      canvas.ctx.beginPath();
      canvas.ctx.rect(this.left, this.top, this.w, this.h);
      canvas.ctx.fillStyle = this.colour;
      canvas.ctx.fill();
      canvas.ctx.lineWidth = 1;
      canvas.ctx.strokeStyle = 'white';
      return canvas.ctx.stroke();
    };

    return Block;

  })();

  this.ControlBar = (function() {

    function ControlBar(id, mouseUpCallback) {
      this.id = id;
      this.mouseUpCallback = mouseUpCallback;
      this.canvas = document.getElementById(this.id);
      this.canvas.addEventListener("mouseup", function(e) {
        return mouseUpCallback(e);
      });
    }

    return ControlBar;

  })();

  this.Game = (function() {

    function Game(canvasId, MIDI) {
      var blueSpeedChange, blueVolumeChange, eventToXY, game, greenSpeedChange, greenVolumeChange, i, mouseUp, redSpeedChange, redVolumeChange, speedChangeFunction, volumeChangeFunction, _i,
        _this = this;
      this.canvasId = canvasId;
      this.MIDI = MIDI;
      this.canvas = new Html5Canvas(this.canvasId, 600, 400);
      this.balls = [new Ball(200, 200, "#ff0000", this.MIDI), new Ball(300, 200, "#00ff00", this.MIDI), new Ball(400, 200, "#0000ff", this.MIDI)];
      eventToXY = function(event) {
        var rect, root, x, y;
        rect = event.currentTarget.getBoundingClientRect();
        root = document.documentElement;
        x = event.pageX - rect.left - root.scrollLeft;
        y = event.pageY - rect.top - root.scrollTop;
        return [x, y];
      };
      speedChangeFunction = function(ball) {
        return function(event) {
          var speed, x, y, _ref;
          _ref = eventToXY(event), x = _ref[0], y = _ref[1];
          speed = 1 + Math.floor((x / 170) * 5);
          ball.dx = speed * (ball.dx / Math.abs(ball.dx));
          return ball.dy = speed * (ball.dy / Math.abs(ball.dy));
        };
      };
      redSpeedChange = speedChangeFunction(this.balls[0]);
      this.redSpeed = new ControlBar("redball_speed", function(e) {
        return redSpeedChange(e);
      });
      greenSpeedChange = speedChangeFunction(this.balls[1]);
      this.greenSpeed = new ControlBar("greenball_speed", function(e) {
        return greenSpeedChange(e);
      });
      blueSpeedChange = speedChangeFunction(this.balls[2]);
      this.blueSpeed = new ControlBar("blueball_speed", function(e) {
        return blueSpeedChange(e);
      });
      volumeChangeFunction = function(ball) {
        return function(event) {
          var x, y, _ref;
          _ref = eventToXY(event), x = _ref[0], y = _ref[1];
          return ball.volume = Math.floor((x / 170) * 127);
        };
      };
      redVolumeChange = volumeChangeFunction(this.balls[0]);
      this.redVolume = new ControlBar("redball_volume", function(e) {
        return redVolumeChange(e);
      });
      greenVolumeChange = volumeChangeFunction(this.balls[1]);
      this.greenVolume = new ControlBar("greenball_volume", function(e) {
        return greenVolumeChange(e);
      });
      blueVolumeChange = volumeChangeFunction(this.balls[2]);
      this.blueVolume = new ControlBar("blueball_volume", function(e) {
        return blueVolumeChange(e);
      });
      game = this;
      this.blocks = [];
      mouseUp = function(event) {
        var rect, root, x, y;
        rect = _this.canvas.canvas.getBoundingClientRect();
        root = document.documentElement;
        x = event.pageX - rect.left - root.scrollLeft;
        y = event.pageY - rect.top - root.scrollTop;
        return game.userClicked(x, y);
      };
      this.canvas.canvas.addEventListener("mouseup", function(e) {
        return mouseUp(e);
      });
      for (i = _i = 0; _i <= 20; i = ++_i) {
        this.userClicked(i * 30, Math.floor(50 + Math.random() * 50));
        this.userClicked(i * 30, Math.floor(300 + Math.random() * 50));
      }
    }

    Game.prototype.userClicked = function(x, y) {
      var b, _i, _len, _ref;
      _ref = this.blocks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        b = _ref[_i];
        if (b.hit(x, y)) {
          this.removeBlock(b);
          return;
        }
      }
      return this.blocks.push(new Block(x, y));
    };

    Game.prototype.removeBlock = function(x) {
      var b;
      return this.blocks = (function() {
        var _i, _len, _ref, _results;
        _ref = this.blocks;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          b = _ref[_i];
          if (x !== b) {
            _results.push(b);
          }
        }
        return _results;
      }).call(this);
    };

    Game.prototype.next = function() {
      var b, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
      _ref = this.balls;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        b = _ref[_i];
        b.move(this.balls, this.blocks);
      }
      this.canvas.background("black");
      _ref1 = this.blocks;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        b = _ref1[_j];
        b.draw(this.canvas);
      }
      _ref2 = this.balls;
      _results = [];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        b = _ref2[_k];
        _results.push(b.draw(this.canvas));
      }
      return _results;
    };

    return Game;

  })();

}).call(this);
